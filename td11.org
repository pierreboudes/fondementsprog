#+TITLE:   Fondements de la programmation lambda-calcul
#+AUTHOR:   Pierre Boudes
#+EMAIL:    boudes@univ-paris13.fr

#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  fr
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc toc:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+LINK_UP:
#+LINK_HOME:
#+XSLT:
#+STARTUP: latex nolatexpreview entitiesplain
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt, a4paper]
#+LATEX_HEADER: \usepackage[margin=1.8cm]{geometry}
#+LATEX_HEADER: \usepackage[table]{xcolor}
#+LATEX_HEADER: \usepackage{xspace}
#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \usepackage{bussproofs}
#+LATEX_HEADER: \usepackage{tikz}\usetikzlibrary{arrows,shapes,trees}
#+LATEX_HEADER: \renewcommand{\maketitle}{{\bigskip{\begin{center}\Large\textbf{Fondements de la programmation}\\[0.1cm] Exercices 11 : extensions, type safety, machine de Krivine\end{center}}}\smallskip}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \usepackage[french]{babel}
#+EXCLUDE_TAGS: noexport correction

#+BEGIN_EXPORT latex
\EnableBpAbbreviations
\pagestyle{fancyplain}
\fancyhf{}
\lhead{ \fancyplain{}{\raisebox{-1ex}{\includegraphics[scale=0.10]{../img/logoLipnNoir.pdf}} P. Boudes, P. Jacobé de Naurois, D. Mazza, V. Mogbil}}
\rhead{ \fancyplain{}{M1 informatique 2016-2017}}
\rfoot{ \fancyplain{}{\thepage}}
%\rfoot{ }
\newcounter{questioncount}
\setcounter{questioncount}{0}
\newcommand{\question}[1][]{\addtocounter{questioncount}{1}\paragraph{Question \Alph{questioncount}. #1}}
\renewcommand{\subsection}[1]{\question[#1]}
\newcommand{\tabDP}{\shortstack{\smallskip\\\DisplayProof\smallskip}}
\newcommand{\eqdef}{\mathrel{\shortstack{\scriptsize\text{def}\\=}}}
\newcommand{\fix}{\mathop{\texttt{fix}}}
#+END_EXPORT





#+BEGIN_EXPORT latex
\begin{multicols}{2}
#+END_EXPORT





On se donne un ensemble $L$ de mots
# (par exemple les chaînes de
# caractères \{A-Z,a-z\} commençant par une majuscule)
ou étiquettes. Un *type somme* est la donnée d'un dictionnaire fini
dont les clés sont des mots et dont les valeurs sont des types:
$\{\text{mot}_1: T_1, \ldots, \text{mot}_n: T_n\}$. On étend les types
avec les types sommes et les termes avec le pattern-matching.

#+BEGIN_EXPORT latex
\begin{align*}
T := \ldots &\mid \{\text{mot}_1: T_1, \ldots, \text{mot}_n: T_n\}\\
t := \ldots &\mid \texttt{match } t \texttt{ with } \\
&\quad\texttt{ case } \text{mot}_1\; x_1 \Rightarrow t_1\\
&\qquad\vdots\\
&\quad\texttt{ case } \text{mot}_n\; x_n\Rightarrow t_n\\
&\mid \text{mot } t\texttt{ as }T\\
v := \ldots &\mid \text{mot } t\texttt{ as }T
\end{align*}
#+END_EXPORT

Remarque : sans ce « $\texttt{as }T$ » on perdrait l'unicité du type
associé à un terme (on aurait par exemple $\text{Vrai}\;\texttt{unit}$ de type
$\{\text{Vrai}: \texttt{Unit}\}$ mais aussi de type $\{\text{Vrai}:
\texttt{Unit}, \text{Faux}: \texttt{Unit}\}$, ou de type $\{\text{Vrai}:
\texttt{Unit}, \text{Saispas}: \texttt{Unit}\}$ etc.).

Règles de réduction.

#+BEGIN_EXPORT latex
\begin{gather*}
\AXC{$t\to t'$}
\UIC{$\texttt{match }t\texttt{ with}\ldots\to\texttt{match }t'\texttt{ with}\ldots$}
\tabDP\\
\AXC{$t\to t'$}
\UIC{$\text{mot}\; t\texttt{ as } T\to \text{mot } t'\texttt{ as } T$}
\tabDP\\
\AXC{}
\UIC{\shortstack[l]{
$\texttt{match } \text{m}_i\; t\texttt{ as } T  \texttt{ with }$ \\
$\qquad\quad\texttt{ case } \text{mot}_1\; x_1 \Rightarrow t_1$\\
$\qquad\qquad\vdots$\\
$\qquad\quad\texttt{ case } \text{mot}_n\; x_n\Rightarrow t_n$\\
$\to {t_i[x_i:=t]}$
}
}
\tabDP
\end{gather*}
#+END_EXPORT

Règles de typage.
#+BEGIN_EXPORT latex
\begin{gather*}
\AXC{$\Gamma\vdash t: \{\ldots, m_i: T_i, \ldots\}$}
\AXC{$\Gamma, x_i : T_i\vdash t_i: T \quad(\forall i)$}
\BIC{\shortstack[l]{
$\Gamma\vdash\texttt{match } t\texttt{ as } \{\ldots, m_i: T_i,\ldots\}  \texttt{ with }$ \\
$\qquad\ldots\texttt{ case } m_i\; x_i \Rightarrow t_i\ldots\quad : T$
}}
\tabDP\\
\AXC{$\Gamma\vdash t_i: T_i$}
\UIC{$\Gamma\vdash  \text{m}_i\; t_i\texttt{ as } \{\ldots, m_i: T_i, \ldots\}: \{\ldots, m_i: T_i, \ldots\}$}
\tabDP
\end{gather*}
#+END_EXPORT


*Théorème de préservation.* Si $\Gamma \vdash t: T$ et $t\to t'$,
alors $\Gamma\vdash t': T$. Ceci est valable pour le lambda-calcul
simplement typé comme pour les extensions présentées ici. La
réciproque est en générale fausse.

*Théorème de progression.* Si $\vdash t: T$ (notez le contexte vide),
alors soit $t$ est une valeur, soit il existe $t'$ tel que $t\to t'$.

*Type safety*. Un langage est dit sûr au niveau du typage (/type/
/safe/) lorsqu'il possède les deux propriétés précédentes
(préservation et progression), éventuellement en élargissant la
propriété de progression de façon à permettre au calcul de terminer
sur des erreurs (des exceptions) aussi bien que sur des valeurs. Notez
que la progression n'implique pas la terminaison.


*Théorème de normalisation forte.* En lambda-calcul simplement typé
la $\beta$-réduction termine toujours (sans avoir besoin d'utiliser
une stratégie particulière).

#+BEGIN_COMMENT
TODO Appel par nom, paresse (par nécessité). En cours
#+END_COMMENT

#+BEGIN_EXPORT latex
\newcommand{\cons}{\mathrel{::}}
#+END_EXPORT

La *machine abstraite de Krivine (KAM)* implémente l'appel par nom en
$\lambda$-calcul. On définit 4 notions :
- terme :: $t := x\mid (t\; t)\mid \lambda x. t$
- environnement :: $e := \emptyset \mid e, x:c$ (un dictionnaire
  associant des clôtures à des variables)
- clôture :: $c := (t, e)$
- pile :: $\pi := \varepsilon \mid c\cons\pi$
L'état de la machine est représenté par un triplet fait d'un terme
d'un environnement et d'une pile. On se donne un terme initial (un
programme) avec un environnement et une pile vide. Une étape de
réduction fait passer d'un état à l'état suivant en appliquant trois
règles :

#+BEGIN_EXPORT latex
\newcommand{\kpush}[3]{\RightLabel{push}\UIC{\ensuremath{#1\qquad #2\qquad #3}}}
\newcommand{\kpop}[3]{\RightLabel{pop}\UIC{\ensuremath{#1\qquad #2\qquad #3}}}
\newcommand{\kderef}[3]{\RightLabel{deref}\UIC{\ensuremath{#1\qquad
#2\qquad #3}}}
#+END_EXPORT

#+BEGIN_EXPORT latex
\begin{gather*}
\AXC{$(t\; u)\qquad e\qquad \pi$}\kpush{t}{e}{(u, e)\cons\pi}
\tabDP
\\
\AXC{$\lambda x. t\qquad e\qquad c:\pi$}\kpop{t}{e, x\cons c}{\pi}
\tabDP
\\
\AXC{$x\qquad e,x:(t, e')\qquad \pi$}\kderef{t}{e'}{\pi}
\tabDP
\end{gather*}
#+END_EXPORT

Par exemple, l'évaluation du terme $((\lambda x. x)\; y)$ sur la KAM par nom se
déroule ainsi:

#+BEGIN_EXPORT latex
\begin{gather*}
\AXC{$((\lambda x. x)\; y) \qquad \emptyset\qquad \varepsilon$}
\kpush{\lambda x. x}{\emptyset}{(y, \emptyset)}
\kpop{x}{x:(y, \emptyset)}{\varepsilon}
\kderef{y}{\emptyset}{\varepsilon}
\DP
\end{gather*}
#+END_EXPORT


Le résultat est $y$ (plus aucune règle ne s'applique).

La *KAM par valeur* est définie en modifiant
les piles de façon à ce qu'elles contiennent deux sortes d'éléments
(/fonctions/ et /arguments/) :
- pile :: $\pi = \varepsilon \mid F c \cons \pi \mid A c  \cons \pi$

#+BEGIN_EXPORT latex
\newcommand{\kswap}[3]{\RightLabel{swap}\UIC{\ensuremath{#1\qquad #2\qquad #3}}}
#+END_EXPORT

Les règles sont, par priorités décroissantes:

#+BEGIN_EXPORT latex
\begin{gather*}
\AXC{$(t\; u)\qquad e\qquad \pi$}\kpush{t}{e}{A(u, e)\cons\pi}
\tabDP
\\
\AXC{$\lambda x. t\qquad e\qquad A(u, e')\cons\pi$}\kswap{u}{e'}{F(\lambda x.t, e)\cons\pi}
\tabDP
\\
\AXC{$x\qquad e,x=(t, e')\qquad \pi$}\kderef{t}{e'}{\pi}
\tabDP
\\
\AXC{$v\qquad e\qquad F(\lambda x. t, e')\cns\pi$}\kpop{t}{e',x=:(v, e)}{\pi}
\tabDP
\end{gather*}
#+END_EXPORT

Dans cette dernière règle, $v$ désigne une valeur c'est à dire ici un
lambda-terme qui n'est pas une application (donc une variable ou un lambda).

Par exemple, l'évaluation du terme $((\lambda x. x)\; y)$ sur la KAM par valeur se
déroule ainsi:
$$
\AXC{$((\lambda x. x)\; y) \qquad \emptyset\qquad \varepsilon$}
\kpush{\lambda x. x}{\emptyset}{A(y, \emptyset)}
\kswap{y}{\emptyset}{F(\lambda x. x, \emptyset)}
\kpop{x}{x=(y, \emptyset)}{\varepsilon}
\kderef{y}{\emptyset}{\varepsilon}
\DP
$$



* Exercices
** Préservation.
Prouver le théorème de préservation pour le $\lambda$-calcul
simplement typé.

** Normalisation forte.
Pourquoi ne prouve t'on pas le théorème de normalisation forte du
lambda-calcul simplement typé par induction sur les termes ?


** Morris.
En C que vaut Morris(1, 0) ? Citer un langage dans lequel cette
fonction s'évaluerait différemment.

#+BEGIN_SRC C
  int Morris(int a, int b)
  {
    if (a == 0) {
      return 1;
    }
    else {
      return Morris(a - 1, Morris(a, b));
    }
  }
#+END_SRC


** Scala.
En Scala, \texttt{val} est l'équivalent du \texttt{let} de Caml, il
permet d'introduire une variable immutable dont la valeur est obtenue en
appel par valeur, \texttt{var} permet d'introduire une variable
mutable dont la valeur est également fixée en appel par valeur,
\texttt{def} permet d'introduire une variable immutable en appel par
nom et \texttt{lazy val} est une variante de \texttt{val} qui est
évaluée paresseusement, en appel par nécessité. Un bloc d'instructions
(entre accolades) s'évalue comme la dernière valeur du bloc. Sauriez
vous dire quelle ligne de code provoque quel affichage dans l'extrait
de programme Scala suivant ?

#+BEGIN_SRC Scala
val x = {println("x"); 1}
var y = {println("y"); 2}
def z = {println("z"); 3}
lazy val w = {println("w"); 4}
x + x
y + y
z + z
w + w
#+END_SRC


** KAM par nom.
Donner l'exécution de la KAM par nom sur le terme $(((\lambda xy. x)\; z)\;
z')$.

*** Correction :correction:
Notation (c'était un exercice de partiel en 2014). On note sur deux
points, si l'enchaînement des règles n'est pas correct ne pas donner
plus de 0.5. Autrement un demi-point en moins par erreur (terme,
contexte, pile). \[ \AXC{$(((\lambda xy. x)\; z)\; z') \qquad
\emptyset\qquad \varepsilon$} \kpush{((\lambda xy. x)\;
z)}{\emptyset}{(z', \emptyset)} \kpush{\lambda xy. x}{\emptyset}{(z,
\emptyset):(z', \emptyset)} \kpop{\lambda y. x}{x=(z, \emptyset)}{(z',
\emptyset)} \kpop{x}{y=(z', \emptyset),x=(z, \emptyset)}{\varepsilon}
\kderef{z}{\emptyset}{\varepsilon} \DP \]


** KAM par valeur.
Donner l'exécution de la KAM par valeur sur le terme $(((\lambda xy. x)\; z)\;
z')$.


*** Correction :correction:
Notation (pour partiel). On note sur deux points, si l'enchaînement des règles n'est pas
correct ne pas donner plus de 0.5. Autrement un demi-point en moins
par erreur (terme, contexte, pile).
\[
\AXC{$(((\lambda xy. x)\; z)\; z') \qquad \emptyset\qquad \varepsilon$}
\kpush{((\lambda xy. x)\; z)}{\emptyset}{(z', \emptyset)}
\kpush{\lambda xy. x}{\emptyset}{(z, \emptyset):(z', \emptyset)}
\kswap{z}{\emptyset}{(\lambda xy. x, \emptyset):(z', \emptyset)}
\kderef{z}{\emptyset}{\varepsilon}
\DP
\]


** KAM (partiel 2015).
On veut comparer le temps d'exécution de la KAM par nom et de la
KAM par valeur. Pour mesurer ce temps on compte le nombre de règles appliquées
dans chaque exécution mais *sans compter* les applications la règle
/swap/. Ainsi les exécutions des deux machines sur le terme $((\lambda x.
x)\; y)$ prennent autant de temps (3 règles hors règle /swap/).
1. Est-ce encore le cas sur le terme $(((\lambda xy. x)\; z)\; z')$ ?
2. Les deux machines ont-elles toujours les mêmes temps d'exécution
   ou bien pouvez-vous trouver un terme pour
   lequel la KAM par nom est plus rapide et/ou un terme pour lequel la
   KAM par valeur est plus rapide ? Justifier par un raisonnement ou
   en donnant des exemples de termes et leurs exécutions.
