#+TITLE:   Fondements de la programmation lambda-calcul
#+AUTHOR:   Pierre Boudes
#+EMAIL:    boudes@univ-paris13.fr

#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  fr
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc toc:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+LINK_UP:
#+LINK_HOME:
#+XSLT:
#+STARTUP: latex nolatexpreview entitiesplain
#+LaTeX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt, a4paper]
#+LATEX_HEADER: \usepackage[margin=2cm]{geometry}
#+LATEX_HEADER: \usepackage[table]{xcolor}
#+LATEX_HEADER: \usepackage{xspace}
#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \usepackage{bussproofs}
#+LATEX_HEADER: \usepackage{tikz}\usetikzlibrary{arrows,shapes,trees}
#+LATEX_HEADER: \renewcommand{\maketitle}{{\bigskip{\begin{center}\Large\textbf{Fondements de la programmation}\\[0.1cm] Exercices 9 et 10 lambda-calcul\end{center}}}\smallskip}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \usepackage[french]{babel}
#+EXCLUDE_TAGS: noexport correction

#+BEGIN_EXPORT latex
\EnableBpAbbreviations
\pagestyle{fancyplain}
\fancyhf{}
\lhead{ \fancyplain{}{\raisebox{-1ex}{\includegraphics[scale=0.10]{../img/logoLipnNoir.pdf}} P. Boudes, P. Jacobé de Naurois, D. Mazza, V. Mogbil}}
\rhead{ \fancyplain{}{M1 informatique 2016-2017}}
\rfoot{ \fancyplain{}{\thepage}}
%\rfoot{ }
\newcounter{questioncount}
\setcounter{questioncount}{0}
\newcommand{\question}[1][]{\addtocounter{questioncount}{1}\paragraph{Question \Alph{questioncount}. #1}}
\renewcommand{\subsubsection}[1]{\question[#1]}
\newcommand{\tabDP}{\shortstack{\smallskip\\\DisplayProof\smallskip}}
\newcommand{\eqdef}{\mathrel{\shortstack{\scriptsize\text{def}\\=}}}
\newcommand{\fix}{\mathop{\texttt{fix}}}
#+END_EXPORT



#+BEGIN_EXPORT latex
\begin{multicols}{2}
#+END_EXPORT

Stratégie d'évaluation : *appel par valeur.* Nous allons maintenant
restreindre la \beta-réduction de façon à ce qu'elle corresponde à la façon dont
les programmes sont évalués dans la plupart des langages de
programmation. On distingue un ensemble particulier de termes appelés
valeurs au delà desquels on ne (\beta-)réduit plus. En l'absence
d'extensions du lambda-calcul, qui viendront après, les valeurs sont
tous les termes qui correspondent à une abstraction :
\[
v := \lambda x. t
\]
Intuitivement, on ne réduit pas dans le corps des fonctions tant
qu'elles ne sont pas complètement appliquées.
#+BEGIN_COMMENT
 En Caml, on ne réduira pas l'expression
#+BEGIN_SRC ocaml
let add10 x y = 10 * x + y in
    add10 3
#+END_SRC
avant de donner une valeur au deuxième paramètre, y.
#+END_COMMENT

On se donne
ensuite des règles d'évaluation qui déterminent exactement l'ordre dans
lequel il faut faire les réductions dans un terme.
#+BEGIN_EXPORT latex
  \begin{gather*}
  \AXC{}
  \UIC{$(\lambda x. t_1\; v_2) \to t_1[x:=v_2]$}\tabDP\\
    \AXC{$t_1 \to t'_1$}
    \UIC{$(t_1\; t_2)\to (t'_1\; t_2)$}
  \tabDP\quad
    \AXC{$t_2 \to t'_2$}
    \UIC{$(v_1\; t_2)\to (v_1\; t'_2)$}
  \tabDP
  \end{gather*}
#+END_EXPORT

Le point important dans cet ensemble de règles est qu'il n'y a pas de
règle qui permette de réduire sous une abstraction.

Nous reviendrons plus en détails sur les différentes stratégies
d'évaluation possibles.

*Unicité du typage.* Nous utilisons désormais une version du lambda-calcul
simplement typé où chaque variable liée par un lambda est annotée par
un type, comme ceci : $\lambda x[T]. t$, de telle sorte que $T$ soit
le type associé à la variable $x$ au moment du jugement de typage :

#+BEGIN_EXPORT latex
  \begin{gather*}
    \AXC{$\Gamma, x:A\vdash t:B$}\RL{abs.}
    \UIC{$\Gamma \vdash \lambda x[A]. t:A \Rightarrow B$}
  \DP
  \end{gather*}
#+END_EXPORT
De cette façon, étant donné un contexte de typage $\Gamma$, et un
terme $t$ ainsi annoté il existe au plus un type $T$ tel que
$\Gamma\vdash t: T$.

Nous allons maintenant
donner des *extensions du lambda-calcul* *simplement typé* de façon à en
faire un langage de programmation, Turing-complet et ayant les
caractéristiques d'un langage de type ML (les langages ML comme SML,
CAML sont inspirés des extensions du lambda-calcul et en particulier
du langage PCF, /programming/ /computable/ /functions/).

*Unit*. On ajoute une valeur
~unit~  de type, ~Unit~.
#+BEGIN_EXPORT latex
  \begin{align*}
    t &:= \ldots \mid \texttt{unit}\\
    v &:= \ldots \mid \texttt{unit}\\
    T &:= \ldots \mid \texttt{Unit}
  \end{align*}  \begin{gather*}
    \AXC{}
    \UIC{$\Gamma \vdash   \texttt{unit} : \texttt{Unit}$}\DP
  \end{gather*}

#+END_EXPORT
Ceci nous permet d'introduire une /forme dérivée/:
#+BEGIN_EXPORT latex
\[
t_1;t_2 \eqdef (\lambda x[\texttt{Unit}]. t_2\;\; t_1)\quad (x\notin FV(t_2)).
\]
#+END_EXPORT
Cette mise en séquence, $t_1; t_2$ a pour effet d'évaluer
$t_1$, de jeter son résultat, puis d'évaluer $t_2$. Les règles
d'évaluation et de typage induites sur la forme sont :
#+BEGIN_EXPORT latex
  \begin{gather*}
  \AXC{$t_1\to t'_1$}
  \UIC{$t_1; t_2\to t'_1; t_2$}
  \tabDP\quad
  \AXC{}
  \UIC{$\texttt{unit}; t_2 \to t_2$}\tabDP
  \\
  \AXC{$\Gamma \vdash t_1 : \texttt{Unit}$}
  \AXC{$\Gamma \vdash t_2: T_2$}
  \BIC{$\Gamma \vdash t_1; t_2: T_2$}\tabDP
  \end{gather*}
#+END_EXPORT

*Let in*.  On peut également se donner la forme syntaxique \texttt{let in}
#+BEGIN_EXPORT latex
    \begin{gather*}
     t := \ldots \mid \texttt{let }x = t\texttt{ in } t\\
    \AXC{}
    \UIC{$\texttt{let }x = v_1\texttt{ in } t_2 \to t_2[x := v_1]$}\tabDP\\
    \AXC{$t_1 \to t'_1$}
    \UIC{$\texttt{let }x = t_1\texttt{ in } t_2 \to \texttt{let }x = t'_1\texttt{ in } t_2 $}\tabDP\\
  \AXC{$\Gamma \vdash t_1: T_1$}
  \AXC{$\Gamma, x : T_1 \vdash t_2: T_2$}
  \BIC{\Gamma\vdash \texttt{let }x = t_1\texttt{ in } t_2 :  T_2$}
  \tabDP
    \end{gather*}
#+END_EXPORT

Au premier abord, cette forme $\texttt{let }x = t_1\texttt{ in } t_2$
est juste du sucre syntaxique pour $(\lambda x[T_1]. t_2\; t_1)$. Pour
/désugariser/ il faudra toutefois trouver l'annotation de type pour
$\lambda x$, donc faire l'inférence de type avant.

*Combinateur de point fixe*. Pour chaque type $T_1$ on se donne
 un  opérateur sur les termes ~fix~ tel que :
#+BEGIN_EXPORT latex
  \begin{gather*}
    t := \ldots \mid (\fix\; t)\\
  \AXC{}
  \UIC{$(\fix \;\lambda x[T_1]. t_2) \to t_2 [x:=(\fix \;\lambda x[T_1]. t_2)]$}\tabDP\\
  \AXC{$t_1 \to t'_1$}
  \UIC{$\fix\; t_1 \to \fix\; t'_1$}\tabDP\\
\AXC{$\Gamma \vdash t_1: T_1\to T_1$}
\UIC{$\Gamma \vdash (\fix \; t_1): T_1$}
\tabDP  \end{gather*}
#+END_EXPORT

Forme dérivée:
#+BEGIN_EXPORT latex
  \begin{align*}
 &\texttt{letrec } x =  t_1 \texttt{ in }   t_2 \\
&\eqdef
  \texttt{let } x = (\fix \;\lambda x[T_1]. t_1) \texttt{ in }   t_2
  \end{align*}
#+END_EXPORT


On peut construire des types de données composées, le plus simple
d'entre eux étant les *paires* :
#+BEGIN_EXPORT latex
  \begin{align*}
    t &:= \ldots \mid \{t, t\} \mid t.1 \mid t.2\\
    v &:= \ldots \mid \{t, t\}\\
    T &:= \ldots \mid T_1\times T_2
  \end{align*}
#+END_EXPORT
Règles de réduction des paires :
#+BEGIN_EXPORT latex
  \begin{gather*}
  \AXC{$t\to t'$}
\LL{$i = 1, 2$}
  \UIC{$t.i\to t'.i$}
  \tabDP\quad
  \AXC{}
\RL{$i = 1, 2$}
  \UIC{$\{v_1, v_2\}.i \to v_i$}\tabDP
  \\
  \AXC{$t_1\to t'_1$}
  \UIC{$\{t_1, t_2\}\to \{t'_1, t_2\}$}
  \tabDP\quad
  \AXC{$t_2\to t'_2$}
  \UIC{$\{v_1, t_2\}\to \{v_1, t'_2\}$}
  \tabDP
  \end{gather*}
#+END_EXPORT
Règles de typage des paires :
#+BEGIN_EXPORT latex
\begin{gather*}
  \AXC{$\Gamma \vdash t_1: T_1$}
  \AXC{$\Gamma \vdash t_2: T_2$}
  \BIC{$\Gamma \vdash \{t_1, t_2\}: T_1 \times T_2$}\DP
\quad
\AXC{$\Gamma \vdash t: T_1\times T_2$}
\UIC{$\Gamma \vdash t.i : T_i$}
\LL{$i = 1, 2$}
\DP
\end{gather*}
#+END_EXPORT

#+BEGIN_EXPORT latex
\end{multicols}
#+END_EXPORT

* Exercices

*** Typage.
Typer les termes suivants en utilisant les extensions appropriées du
lambda-calcul.
1. $\texttt{let } f = \lambda xy. x \texttt{ in } \lambda abc. (f\;
   (f\; a\; b)\; c)$.
2. $(\lambda xy.x \; \texttt{unit} \; (\lambda z. z)); \lambda xy. y$
3. $(\fix \; \lambda x. x)$
4. $(\fix \; \lambda xy. x)$
4. $\texttt{letrec } f = \lambda ghx. (g \; x\; (f\; g\; h\; (h\; x))
   \; (h\; x))\texttt{ in } (f\; (\lambda xyz. z)\; (\lambda z. z))$
8. $\lambda x. x.1$
9. $\lambda xy. \{x, y\}$

** Letrec
*** Question de partiel.
Dans un =letrec= qu'est-ce qui s'apparente à du sucre syntaxique (ou une
forme dérivée) et qu'est ce qui est une véritable extension du
lambda-calcul simplement typé ?
*** Fonctions récursives.
Définir factorielle à l'aide d'un =letrec= puis supprimer le sucre
syntaxique. De même pour la fonction de Fibonacci.

*** Récursion.
La plupart du temps un =letrec= sert à définir une fonction, c'est à
dire un terme de type $T_1\Rightarrow T_2$, pour un certain $T_1$ et un
certain $T_2$. Pouvez-vous trouver une expression définie
récursivement et qui soit d'un type autre qu'une flèche ?

** Preuves par induction sur les jugements de typage
*** Affaiblissement
(importation dans d'autres contextes).
Prouver que, en lambda-calcul simplement typé, si $\Gamma\vdash t: T$
alors pour n'importe quel $x\not\in FV(t)$, $\Gamma, x:T'\vdash t: T$.

En déduire que si $\Gamma\vdash t: T$
alors $\Gamma,
x_1:T_1, \ldots, x_n:T_n\vdash t: T$,  pour n'importe quels
$x_1,\ldots,x_n\not\in FV(t)$.

*** Substitution
(modularité et liaison.)
Prouver que si $\Gamma, x : T' \vdash t : T$ et $\Gamma \vdash t' :
T'$, alors $\Gamma \vdash t[x:=t'] : T$.




* plus tard :noexport:

*Annotation d'un terme par un type* (/ascription/). TODO

** Combinateur de point fixe Y de Church
Soit :
#+BEGIN_EXPORT latex
\begin{gather*}
   Y = \lambda f.(\lambda x.f (x\; x)) (\lambda x.f (x\; x))
  \end{gather*}
#+END_EXPORT
Dans le lambda-calcul pur, pour $f$ terme quelconque, montrer que $(Y f) \equiv_{\beta} (f (Y f))$.

*** Solution
On montre que $(Y\; f)$ est $\beta$ equivalent à $(f (Y
f))$, c'est à dire qu'il y a un terme en lequel se réduisent chacun de
ces deux termes.
#+BEGIN_EXPORT latex
  \begin{align*}
    (Y\; f)&= (\lambda f.(\lambda x.f (x\; x)) (\lambda x.f (x\; x))\;
    f)\\
  &\to_{\beta} \underbrace{((\lambda x.f (x\; x))\; (\lambda x.f (x\; x)))}_{t}\\
  &\to_{\beta} (f \; \underbrace{((\lambda x.f (x\; x))\;(\lambda x.f (x\; x)))}_{t})
  \end{align*}
#+END_EXPORT
On a $(Y\; f)\to_{\beta}  t$, donc $(f\;(Y\; f))\to_{\beta} (f\; t)$
et $(Y\; f)\to_{\beta} (f\; t)$ donc ces deux termes sont $\beta$-équivalents.

** Fonction récursive en lambda-calcul
Définir la fonction factorielle en lambda-calcul pur (sur les entiers
de Church). Indication : cette fonction doit être le point fixe d'un
fonction définie par cas.

*** Solution
On pose $h = \lambda gn. \operatorname{ifthenelse}\;
(\operatorname{iszero}\; n)\; \underline{1}\; (\operatorname{mult}\; n \; (g \; (\operatorname{pred}
\; n)))$. On a alors que factorielle est le terme $\operatorname{fact}
= (Y\; h)$. On vérifie le fonctionnement sur des exemples
comme  $(\operatorname{fact} 0)$ et $(\operatorname{fact} 2)$ ou  $(\operatorname{fact} 3)$. Puis plus
formellement on établit que  $\operatorname{fact} \underline{0}$ et $\operatorname{fact} \underline{n + 1}$
sont $\beta$-équivalents respectivement à $\underline{1}$ et à
$(\operatorname{mult}\;\underline{n + 1} \; (\operatorname{fact}\; \underline{n}))$.
